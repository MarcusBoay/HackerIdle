using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BotnetManager : MonoBehaviour {

    public float xarvesterPointPerSecond;
    public int numberOfUpgrades;
    public float numberOfXarvesters;

    public int baseXarvesterCost;
    public int xarvesterCost;
    public int upgradeCost;
    public int maxUpgrade;

    private bool coroutineSwitch;

    //UI stuff
    public Text numberOfXarvestersUIValue;
    public Text costOfXarvesterUIValue;
    public Text numberOfUpgradesUIValue;
    public Text costOfUpgradeUIValue;

    public Button upgradeButton;

    //GameManager reference
    private GameObject GM;
    
	void Start () {
        GM = GameObject.Find("GameManager").gameObject;
        coroutineSwitch = false;
        xarvesterCost = baseXarvesterCost;
	}
	
	void Update () {
        //change UI for number of botnets
        numberOfXarvestersUIValue.text = Convert.ToInt32(numberOfXarvesters).ToString();
        //change UI for cost of botnets
        ShowUICost(costOfXarvesterUIValue, xarvesterCost);
        //change UI for number of upgrades
        numberOfUpgradesUIValue.text = numberOfUpgrades.ToString();
        //change UI for cost of upgrades
        ShowUICost(costOfUpgradeUIValue, upgradeCost);
        //change UI for number of speed
        //ShowUIText(numberOfSpeedUIValue, numberOfSpeed);
        //change UI for cost of speed
        //ShowUICost(costOfSpeedUIValue, speedCost);
	}

    IEnumerator BotnetPointGiver()
    {
        yield return new WaitForSeconds(1 / numberOfXarvesters);
        while (true)
        {
            //give player points generated by botnet
            GM.GetComponent<ScoreManager>().points += xarvesterPointPerSecond;
            //wait X seconds before giving player points generated by botnet where X is 1/number of botnets
            yield return new WaitForSeconds(1 / numberOfXarvesters);
        }
    }

    public void IncreaseNumberOfXarvesters()
    {
        //checks if the player has enough points to buy a botnet
        if (GM.GetComponent<ScoreManager>().points >= xarvesterCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= xarvesterCost;
            //increase player's number of botnets
            numberOfXarvesters += 1;
            //increase cost of botnet everytime it is purchased
            xarvesterCost = Convert.ToInt32(baseXarvesterCost * Mathf.Pow(1.15f, numberOfXarvesters));
        }
        //activates coroutine only once; when player gets first Xarvester
        if (coroutineSwitch == false)
        {
            StartCoroutine(BotnetPointGiver());
            coroutineSwitch = true;
        }
    }

    public void IncreaseNumberOfUpgrades()
    {
        // checks if the player has enough points to upgrade
        if (GM.GetComponent<ScoreManager>().points >= upgradeCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= xarvesterCost;
            //increase player's number of botnets
            numberOfUpgrades += 1;
            //increase xarvester point per second
            xarvesterPointPerSecond = xarvesterPointPerSecond * 2;
            //max level of upgrades
            if (numberOfUpgrades == maxUpgrade)
            {
                upgradeButton.interactable = false;
                upgradeCost = 0;
            }else
            {
                //increase cost of upgrade everytime it is purchased
                upgradeCost = Convert.ToInt32(upgradeCost * 5);
            }
        }
    }

    /*public void IncreaseNumberOfSpeed()
    {
        if (GM.GetComponent<ScoreManager>().points >= speedCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= speedCost;
            //increase player's number of botnets
            numberOfSpeed += 1;
            //max level of speed
            if (numberOfSpeed == maxSpeed)
            {
                speedButton.interactable = false;
                speedCost = 0;
            }else
            {
                //increase cost of upgrade everytime it is purchased
                speedCost = Convert.ToInt32(speedCost * 1.3);
            }
        }
    }*/

    //UI stuff
    public void ShowUICost(Text myText, int myCost)
    {
        myText.text = " Cost: " + myCost.ToString();
    }
}
