using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BotnetManager : MonoBehaviour {

    public int numberOfUpgrades;
    public int numberOfBotnets;
    public int numberOfSpeed;
    public float[] botnetSpeed;
    public int[] pointsValue;
    public int botnetCost;
    public int upgradeCost;
    public int speedCost;
    public int maxUpgrade;
    public int maxSpeed;

    //UI stuff
    public Text numberOfBotnetsUIValue;
    public Text costOfBotnetUIValue;
    public Text numberOfUpgradesUIValue;
    public Text costOfUpgradeUIValue;
    public Text numberOfSpeedUIValue;
    public Text costOfSpeedUIValue;

    public Button upgradeButton;
    public Button speedButton;

    //GameManager reference
    private GameObject GM;
    
	void Start () {
        GM = GameObject.Find("GameManager").gameObject;
        StartCoroutine(BotnetPointGiver());
	}
	
	void Update () {
        //change UI for number of botnets
        ShowUIText(numberOfBotnetsUIValue, numberOfBotnets);
        //change UI for cost of botnets
        ShowUICost(costOfBotnetUIValue, botnetCost);
        //change UI for number of upgrades
        ShowUIText(numberOfUpgradesUIValue, numberOfUpgrades);
        //change UI for cost of upgrades
        ShowUICost(costOfUpgradeUIValue, upgradeCost);
        //change UI for number of speed
        ShowUIText(numberOfSpeedUIValue, numberOfSpeed);
        //change UI for cost of speed
        ShowUICost(costOfSpeedUIValue, speedCost);
	}

    IEnumerator BotnetPointGiver()
    {
        yield return new WaitForSeconds(botnetSpeed[numberOfSpeed]);
        while (true)
        {
            //give player points generated by botnet
            GM.GetComponent<ScoreManager>().points += pointsValue[numberOfUpgrades] * numberOfBotnets * 0.2f;
            //wait 1 second before giving player points generated by botnet
            yield return new WaitForSeconds(botnetSpeed[numberOfSpeed]); //1 second may be placeholder value
        }
    }

    public void IncreaseNumberOfBotnets()
    {
        //checks if the player has enough points to buy a botnet
        if (GM.GetComponent<ScoreManager>().points >= botnetCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= botnetCost;
            //increase player's number of botnets
            numberOfBotnets += 1;
            //increase cost of botnet everytime it is purchased
            botnetCost = Convert.ToInt32(botnetCost * 1.15);
        }
    }

    public void IncreaseNumberOfUpgrades()
    {
        // checks if the player has enough points to upgrade
        if (GM.GetComponent<ScoreManager>().points >= upgradeCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= botnetCost;
            //increase player's number of botnets
            numberOfUpgrades += 1;            
            //max level of upgrades
            if (numberOfUpgrades == maxUpgrade)
            {
                upgradeButton.interactable = false;
                upgradeCost = 0;
            }else
            {
                //increase cost of upgrade everytime it is purchased
                upgradeCost = Convert.ToInt32(upgradeCost * 5);
            }
        }
    }

    public void IncreaseNumberOfSpeed()
    {
        if (GM.GetComponent<ScoreManager>().points >= speedCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= speedCost;
            //increase player's number of botnets
            numberOfSpeed += 1;
            //max level of speed
            if (numberOfSpeed == maxSpeed)
            {
                speedButton.interactable = false;
                speedCost = 0;
            }else
            {
                //increase cost of upgrade everytime it is purchased
                speedCost = Convert.ToInt32(speedCost * 1.3);
            }
        }
    }

    //UI stuff
    public void ShowUIText(Text myText, int myValue)
    {
        myText.text = myValue.ToString();
    }

    public void ShowUICost(Text myText, int myCost)
    {
        myText.text = " Cost: " + myCost.ToString();
    }
}
