using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class BotnetTier2Manager : MonoBehaviour {

    [Header("Settings")]
    public float botnetPointPerSecond;
    public int numberOfUpgrades;
    public int maxUpgrade;
    public int numberOfBotnets;
    public double totalPointsPerSecond;
    public double basePointsToLose;
    public double totalPointsToLose;
    public double totalPointsObtained;

    [Header("Costs")]
    public int baseCost;
    public int currentCost;
    public int upgradeCost;

    [Header("Percent chance to get caught every time botnet tries to send ping")]
    [Range(0f, 1f)]
    public float percentToGetCaught;
    [Range(0f, 1f)]
    public float minPercentToGetCaught;

    private bool coroutineSwitch;
    
    [Header("Botnet tooltip variables")]
    public string botnetTitle;
    public string botnetDescription;
    [Multiline]
    public string botnetStats;

    [Header("Upgrade tooltip variables")]
    public string upgradeTitle;
    public string upgradeDescription;
    [Multiline]
    public string upgradeStats;

    [Header("Text UI")]
    public Text numberOfBotnetsUIValue;
    public Text costOfBotnetUIValue;
    public Text numberOfUpgradesUIValue;
    public Text costOfUpgradeUIValue;

    [Header("Button UI")]
    public Button buyButton;
    public Button upgradeButton;

    //GameManager reference
    private GameObject GM;
    private GameObject STM;

    //Tooltip reference
    private GameObject TT;
    private Text TTTitle;
    private Text TTDesc;
    private GameObject TTStatsGO;
    private Text TTStats;

    void Start()
    {
        GM = GameObject.Find("GameManager").gameObject;
        STM = GameObject.Find("ServerTierManager").gameObject;

        TT = GameObject.Find("Canvas").transform.FindChild("Panel").FindChild("TooltipPanel").gameObject;
        TTTitle = TT.transform.FindChild("Title").GetComponent<Text>();
        TTDesc = TT.transform.FindChild("Description").GetComponent<Text>();
        TTStatsGO = TT.transform.FindChild("Stats").gameObject;
        TTStats = TTStatsGO.GetComponent<Text>();

        coroutineSwitch = false;
        currentCost = baseCost;
        totalPointsToLose = basePointsToLose;
    }

    void Update()
    {
        //change points per second by botnets
        totalPointsPerSecond = numberOfBotnets * botnetPointPerSecond + numberOfBotnets * botnetPointPerSecond * STM.GetComponent<ServerTierManager>().serverTier;
        //change UI for number of botnets
        numberOfBotnetsUIValue.text = Convert.ToInt32(numberOfBotnets).ToString();
        //change UI for cost of botnets
        ShowUICost(costOfBotnetUIValue, currentCost);
        //change UI for number of upgrades
        numberOfUpgradesUIValue.text = numberOfUpgrades.ToString();
        //change UI for cost of upgrades
        ShowUICost(costOfUpgradeUIValue, upgradeCost);
        //if player points < cost, disable button
        if (GM.GetComponent<ScoreManager>().points < currentCost)
        {
            buyButton.interactable = false;
        }
        else
        {
            buyButton.interactable = true;
        }

        if (GM.GetComponent<ScoreManager>().points < upgradeCost)
        {
            upgradeButton.interactable = false;
        }
        else
        {
            upgradeButton.interactable = true;
        }
    }

    IEnumerator BotnetPointGiver()
    {
        yield return new WaitForSeconds(1);
        while (true)
        {
            float percentCatch = UnityEngine.Random.value;
            //check to see if player is caught
            if (percentCatch <= 1 - percentToGetCaught)
            {
                //give player points generated by botnet
                GM.GetComponent<ScoreManager>().points += botnetPointPerSecond * numberOfBotnets + botnetPointPerSecond * STM.GetComponent<ServerTierManager>().serverTier * numberOfBotnets;
                //update total points obtained by botnet
                totalPointsObtained += botnetPointPerSecond * numberOfBotnets + botnetPointPerSecond * STM.GetComponent<ServerTierManager>().serverTier * numberOfBotnets;
            }
            else
            {
                Debug.Log("you are caught!");
                //reset all botnets
                numberOfBotnets = 0;
                //reset cost of botnets
                currentCost = baseCost;
                //reset coroutine switch
                coroutineSwitch = false;
                //reset points to lose
                totalPointsToLose = basePointsToLose;
                //take away player's points
                GM.GetComponent<ScoreManager>().points -= totalPointsToLose;
                //break out of coroutine loop
                break;
            }
            //wait X seconds before giving player points generated by botnet where X is 1/number of botnets
            yield return new WaitForSeconds(1);
        }
    }

    public void IncreaseNumberOfBotnets()
    {
        //checks if the player has enough points to buy a botnet
        if (GM.GetComponent<ScoreManager>().points >= currentCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= currentCost;
            //increase player's number of botnets
            numberOfBotnets += 1;
            //increase total points to lose
            totalPointsToLose *= numberOfBotnets;
            //increase cost of botnet everytime it is purchased
            currentCost = Convert.ToInt32(baseCost * Mathf.Pow(1.15f, numberOfBotnets));
        }
        //activates coroutine only once; when player gets first botnet
        if (coroutineSwitch == false)
        {
            StartCoroutine(BotnetPointGiver());
            coroutineSwitch = true;
        }
    }

    public void IncreaseNumberOfUpgrades()
    {
        // checks if the player has enough points to upgrade
        if (GM.GetComponent<ScoreManager>().points >= upgradeCost)
        {
            //decrease player's points by 1 botnet cost
            GM.GetComponent<ScoreManager>().points -= currentCost;
            //increase player's number of botnets
            numberOfUpgrades += 1;
            //increase botnet point per second
            botnetPointPerSecond = botnetPointPerSecond * 2;
            //reduce percent change to get caught
            if (percentToGetCaught > minPercentToGetCaught)
            {
                percentToGetCaught /= 2;
            }
            else if (percentToGetCaught < minPercentToGetCaught)
            {
                percentToGetCaught = minPercentToGetCaught;
            }
            //max level of upgrades
            if (numberOfUpgrades == maxUpgrade)
            {
                upgradeButton.interactable = false;
                upgradeCost = 0;
            }
            else
            {
                //increase cost of upgrade everytime it is purchased
                upgradeCost = Convert.ToInt32(upgradeCost * 5);
            }
        }
    }

    //UI stuff
    public void ShowUICost(Text myText, int myCost)
    {
        myText.text = " Cost: " + myCost.ToString();
    }

    //UI stuff
    public void ShowTooltipBotnet()
    {
        TTTitle.text = botnetTitle;
        TTDesc.text = botnetDescription;
        if (!TTStatsGO.activeSelf)
        {
            TTStatsGO.SetActive(true);
        }
        TTStats.text = botnetStats;
        TT.SetActive(true);
    }

    //UI stuff
    public void HideTooltipBotnet()
    {
        TT.SetActive(false);
        TTTitle.text = String.Empty;
        TTDesc.text = String.Empty;
        TTStats.text = String.Empty;
    }

    //UI stuff
    public void ShowTooltipUpgrade()
    {
        TTTitle.text = upgradeTitle;
        TTDesc.text = upgradeDescription;
        if (!TTStatsGO.activeSelf)
        {
            TTStatsGO.SetActive(true);
        }
        TTStats.text = upgradeStats;
        TT.SetActive(true);
    }

    //UI stuff
    public void HideTooltipUpgrade()
    {
        TT.SetActive(false);
        TTTitle.text = String.Empty;
        TTDesc.text = String.Empty;
        TTStats.text = String.Empty;
    }
}